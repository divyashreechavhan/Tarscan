use orders
db.orders.insert([ { "Order_id":1, "Cust_id":"A1", "Cust_name":"aryan",
... "Phone_no":[9850389364,9856746376],
... "Email_id":"aryan@gmail.com",
... "Item_name":"mouse",
... "DtOfOrder": ISODate("2017-06-12T00:00:00Z"),
... "Qty":2,
... "Amt":40000,
... "Status":"D"
... }])

db.orders.find().pretty()

//insert 2-3 records in collection

1).Create a simple index on cust_id and also create a simple index on Item_name. Try 
to make a duplicate entry.
=> db.orders.createIndex({Cust_id:1})
     db.orders.createIndex({Item_name:1})
     db.orders.getIndexes()

2).Create unique index on the order_id key and try to make duplicate entry.
=> db.orders.createIndex({Order_id:1},{unique:true})

3). Create a multikey index on phone_no and find the customers with 2 phone nos.
=>  db.orders.createIndex({Phone_no:1})
      db.orders.find({Phone_no:{$size:2}}).pretty()

4).Create a sparse index on email_id key and show the effects with and without
    indexing. (Hint:use find() before and after aplying index. Also use .explain())
=> db.orders.find({Email_id:"aryan@gmail.com"}).explain()
     db.orders.createIndex({Email_id:1},{sparse:true})
     db.orders.find({Email_id:"aryan@gmail.com"}).explain()

5) Display all indexes created on order collection and Also show the size of indexes.
=>  db.orders.getIndexes()
      db.orders.totalIndexSize()

6). Delete all indexes.
=> db.orders.dropIndexes()

7). A) Find Total no of orders received so far
     => db.orders.find({Status:'D'}).count()
    B) how many orders are pending.
    =>  db.orders.find({Status:'P'}).count()

8). Display all customer names of orders collection with no repetition
=> db.orders.distinct("Cust_name")

9). Show results and details of sorting documents based on amount
=> db.orders.find().sort({Amt:1}).pretty()

10). Show how many orders are placed by each customer
=> db.orders.aggregate({$group:{_id:"$Cust_name",cnt_of_orders:{$sum:1}}})

11). Display all customer ids and their total pending order amount in descending order.
=>


12). Display all customer ids in ascending order with total order amount which have 
been is delivered.
=>db.orders.aggregate({$match:{Status:'D'}},{$group:{_id:"$Cust_id",tot_amt:{$sum:"$Amt"}}},{$sort:{_id:1}})

13). Show top three Selling Items from orders collection.
=>  db.orders.aggregate({$group:{_id:"$Item_name",totqty:{$sum:"$Qty"}}},{$sort:{totqty:-1}},{$limit:3})

14). Find the date on which maximum orders are received.
=>  db.orders.aggregate({$group:{_id:"$DtOfOrder",cnt_of_order:{$sum:1}}},{$sort:{cnt_of_order:-1}},{$limit:1})

15).  Find which customer has placed maximum orders.
=>  db.orders.aggregate({$group:{_id:"$Cust_name",cnt_order_id:{$sum:1}}},{$sort:{cnt_of_order:-1}},{$limit:1})db.order